# to create a new Django project:
django-admin.py startproject [project_name]
e.g.
django-admin.py startproject django_test

# how to access django video tutorials by Mike Hibbert on Youtube. An index of
# these videos is available on https://www.djangoproject.com
# https://www.djangoproject.com
# click on "code"
# https://code.djangoproject.com
# Django resources page
# https://code.djangoproject.com/wiki/DjangoResources
# Tutorials on the web -> A list of Django tutorials
# https://code.djangoproject.com/wiki/Tutorials
# Intuitive 20 video tutorial series for Django beginners

/Users/mitchell/git/DjangoPractice/django_test/storage.db
# This is the location of my sqlite3 database.

# Let's Make An App:
python manage.py startapp [app name]
python manage.py startapp article

# This is what my django database line in settings.py looks like:
'NAME': os.path.join('/Users/mitchell/git/DjangoPractice/django_test/', 'storage.db')

# Create the database:
python manage.py syncdb

# superuser password: kernel

# These are the possible products I could use to look at my database:
# SQLite Database Browser
# SQLite Professional Read-Only

# Make sure that you add "articles" in your "INSTALLED_APPS" array in your
# settings.py. "articles" is the name of your app.

# If you don't have permissions to create tables through django, 

python manage.py sql [app name]
python manage.py sql article

# you will get a print out like this:
BEGIN;
CREATE TABLE "article_article" (
    "id" integer NOT NULL PRIMARY KEY,
    "title" varchar(200) NOT NULL,
    "body" text NOT NULL,
    "pub_date" datetime NOT NULL,
    "likes" integer NOT NULL
)
;

COMMIT;

# which you can copy and paste as you need to a different terminal where you
# DO have access to the database.

# Start watching Python Django tutorial 2 settings.py and database models at
# Minute 20

# Possible Future Reading: https://docs.djangoproject.com/en/1.6/
# read Models -> Field Types

# If you decide that you're going to change the article model, and/or any of
# the fields within it, take note:
# It's difficult to change stuff BEFORE you insert "articles" in
# "INSTALLED_APPS" in models.py. But if you have to make a change, this is how
# you would go about doing it:
python manage.py reset [app]
python manage.py reset article
# This will remove the 'article' table from inside the database.

# Book Mark:
https://www.youtube.com/watch?v=D5VlpgEVVg4&t=22m0s

python manage.py shell
>>> from article.models import Article

# This will list all of the objects in there:
>>> Article.objects.all()

# We have to make sure we use the timezone settings, the same one we inputted
# onto settings.py
>>> from django.utils import timezone

# Let's create some objects:
>>> a = Article(title="Test 1", body="blah", pub_date=timezone.now(), likes=0)

# If you want to print the instance of Article a, you simply just type "a"
# on the python command line.
>>> a

# This is the way you save this instance:
>>> a.save()

# Let's figure out the id of the instance:
>>> a.id
1

# Let's create another:
>>> a = Article(title="Test 2", body="blah", pub_date=timezone.now(), likes=0)
>>> a.save()
>>> a.id
2

# And let's create another:
>>> a = Article(title="Test 3", body="blah", pub_date=timezone.now(), likes=0)
>>> a.save()
>>> a.id
3

# Let's pull all 3 objects that we have saved into the database:
>>> Article.objects.all()
[<Article: Article object>, <Article: Article object>, <Article: Article object>]

# However, that didn't give us much of a chance to tell which one is which. In
# order to do that, we can insert the following code inside models.py of
# the article module, inside the Article class:
def __unicode__(self):
    return self.title

# Now, if you insert that code and save models.py, and do again:
python manage.py shell
# Make sure that you import Article again:
from article.models import Article
# Now if you run:
>>> Article.objects.all()
[<Article: Test 1>, <Article: Test 2>, <Article: Test 3>]

# Bookmark:
https://www.youtube.com/watch?v=7qiq8gnSrxg

# This is how you run the development server:
python manage.py runserver

# Your view goes in this text file: django_test/article/views.py
#          # Or for a more generic: [project_name]/[app_name]/views.py

# Your URL goes here: /django_test/django_test/urls.py
#                     /[project_name]/[project_name]/urls.py

# CREATE a templates folder here:
# /Users/mitchell/git/DjangoPractice/django_test
# this is on the same level as these files/folders:
# article
# django_test
# manage.py
# storage.db

# Bookmark:
https://www.youtube.com/watch?v=7qiq8gnSrxg&t=7m1s